/* Generated by Together */

#ifndef CMANUVER_H
#define CMANUVER_H
#include "IManuver.h"

#include "IPlanePathFraction.h"

/////////////////////////////////////////////////////////////////////////////
// move to separate file
struct SPlanesConsts
{
	static const float MIN_HEIGHT;
};

/////////////////////////////////////////////////////////////////////////////
interface IPlane;

/////////////////////////////////////////////////////////////////////////////
/**
 * в маневре в зависимости от участка траектории задается крен самолета (либо от вертикали, либо от направления
 * к центру кривизны.
 */
/////////////////////////////////////////////////////////////////////////////
class CManuver : public IManuver 
{
	DECLARE_SERIALIZE;
	CPtr<IPathFraction> pPath;
	float fProgress;															// path progress
	float fSpeed;
	
	CVec3 vCenter;
	CVec3 vSpeed;
	CVec3 vNormal;			

	IPlane *pPlane;

protected:

	void InitCommon( interface IPathFraction *_pPath, interface IPlane *_pPlane );
	bool AdvanceCommon( const NTimer::STime timeDiff );

private:
	void CalcSpeed();
	void CalcPoint();
	void CalcNormale();
	
	// height difference needed to start horisontal move
	bool GetToHorisontalOffset( const CVec3 &vSpeed, const float _fTurnRadius, const float fHeight, CVec3 *pManuverPos ) const;
public:

	//CRAP{ FOR TEST
	// preferred top direction
	virtual CVec3 STDCALL GetTopDirection() const
	{
		return CVec3(0,0,1.0f);
	}
	virtual const CVec3 STDCALL GetEndPoint() const { return pPath->GetEndPoint(); }
	//CRAP}

	virtual CVec3 STDCALL GetPos() const { return vCenter; }
	virtual CVec3 STDCALL GetSpeed() const { return vSpeed; }
	virtual CVec3 STDCALL GetNormale() const { return vNormal; }

	virtual CVec3 GetProspectivePoint( const float fT ) const;
	
	// helper functions
	static const CVec3 CalcPredictedPoint( interface IPlane *pPos, interface IPlane *pEnemy );
};
/////////////////////////////////////////////////////////////////////////////
//	CManuverGeneric
/////////////////////////////////////////////////////////////////////////////
class CManuverGeneric: public CManuver 
{
	OBJECT_COMPLETE_METHODS( CManuverGeneric );
	DECLARE_SERIALIZE;
public:

	void Init( interface IPlane *pPos, const CVec3 &vPos );
	virtual bool STDCALL Advance( const NTimer::STime timeDiff );
};
/////////////////////////////////////////////////////////////////////////////
//	CManuverSteepClimb
/////////////////////////////////////////////////////////////////////////////
// 30-45 degrees gorka
//
class CManuverSteepClimb : public CManuver 
{
	OBJECT_COMPLETE_METHODS( CManuverSteepClimb );
	DECLARE_SERIALIZE;
public:
	CManuverSteepClimb() {  }
	
	void Init( interface IPlane *pPos );
	virtual bool STDCALL Advance( const NTimer::STime timeDiff );
	virtual void Init( const enum EManuverDestination dest, interface IPlane *pPlane, interface IPlane *pEnemy = 0 );
};
#endif //CMANUVER_H
