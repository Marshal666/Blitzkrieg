#ifndef __IMISSION_H__
#define __IMISSION_H__
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma ONCE
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum
{
	MISSION_BASE_VALUE							= 0x100e0000,
	//
	MISSION_MO_OBJECT								= MISSION_BASE_VALUE + 1,
	MISSION_MO_UNIT_MECHANICAL			= MISSION_BASE_VALUE + 2,
	MISSION_MO_UNIT_INFANTRY				= MISSION_BASE_VALUE + 3,
	MISSION_MO_PROJECTILE						= MISSION_BASE_VALUE + 4,
	MISSION_MO_BUILDING							= MISSION_BASE_VALUE + 5,
	MISSION_MO_SQUAD								= MISSION_BASE_VALUE + 6,
	MISSION_MO_ENTRENCHMENT_SEGMENT	= MISSION_BASE_VALUE + 7,
	MISSION_MO_BRIDGE_SPAN					= MISSION_BASE_VALUE + 8,
	//
	MISSION_UI_WHO_IN_CONTAINER			= MISSION_BASE_VALUE + 50,
	MISSION_UI_UNIT_OBSERVER				= MISSION_BASE_VALUE + 51,
	//
	MISSION_INTERFACE_MISSION				= MISSION_BASE_VALUE + 110,
	MISSION_COMMAND_MISSION					= MISSION_BASE_VALUE + 111,
	MISSION_WORLD										= MISSION_BASE_VALUE + 112,
	//
	MISSION_INTERFACE_SAVE_MISSION	= MISSION_BASE_VALUE + 121,
	MISSION_COMMAND_SAVE_MISSION		= MISSION_BASE_VALUE + 122,
	MISSION_INTERFACE_LOAD_MISSION	= MISSION_BASE_VALUE + 123,
	MISSION_COMMAND_LOAD_MISSION		= MISSION_BASE_VALUE + 124,
	MISSION_INTERFACE_QUIT_MISSION	= MISSION_BASE_VALUE + 125,
	MISSION_COMMAND_QUIT_MISSION		= MISSION_BASE_VALUE + 126,
	//
	MISSION_INTERFACE_CAMPAIGN			= MISSION_BASE_VALUE + 132,
	MISSION_COMMAND_CAMPAIGN				= MISSION_BASE_VALUE + 133,
	MISSION_INTERFACE_CHAPTER				= MISSION_BASE_VALUE + 134,
	MISSION_COMMAND_CHAPTER					= MISSION_BASE_VALUE + 135,
	MISSION_INTERFACE_ABOUT_MISSION	= MISSION_BASE_VALUE + 136,
	MISSION_COMMAND_ABOUT_MISSION		= MISSION_BASE_VALUE + 137,
	
	GAMETT_CLIENT_ACK_MANAGER				= MISSION_BASE_VALUE + 138,
	
	MISSION_INTERFACE_MAIN_MENU			= MISSION_BASE_VALUE + 140,
	MISSION_COMMAND_MAIN_MENU				= MISSION_BASE_VALUE + 141,
	MISSION_INTERFACE_STATS					= MISSION_BASE_VALUE + 144,
	MISSION_COMMAND_STATS						= MISSION_BASE_VALUE + 145,
	MISSION_INTERFACE_ENCYCLOPEDIA	= MISSION_BASE_VALUE + 148,
	MISSION_COMMAND_ENCYCLOPEDIA		= MISSION_BASE_VALUE + 149,
	MISSION_INTERFACE_CUSTOM_MISSION= MISSION_BASE_VALUE + 150,
	MISSION_COMMAND_CUSTOM_MISSION	= MISSION_BASE_VALUE + 151,
	MISSION_INTERFACE_UNITS_POOL		= MISSION_BASE_VALUE + 152,
	MISSION_COMMAND_UNITS_POOL			= MISSION_BASE_VALUE + 153,
	MISSION_INTERFACE_UPGRADE_UNIT	= MISSION_BASE_VALUE + 154,
	MISSION_COMMAND_UPGRADE_UNIT		= MISSION_BASE_VALUE + 155,
	MISSION_INTERFACE_ADD_UNIT_TO_MISSION		= MISSION_BASE_VALUE + 158,
	MISSION_COMMAND_ADD_UNIT_TO_MISSION			= MISSION_BASE_VALUE + 159,
	MISSION_INTERFACE_SINGLE_MEDAL	= MISSION_BASE_VALUE + 160,
	MISSION_COMMAND_SINGLE_MEDAL		= MISSION_BASE_VALUE + 161,
	MISSION_INTERFACE_NEXT_CHAPTER	= MISSION_BASE_VALUE + 166,
	MISSION_COMMAND_NEXT_CHAPTER		= MISSION_BASE_VALUE + 167,
	
	MISSION_INTERFACE_IM_LOAD_MISSION	= MISSION_BASE_VALUE + 168,
	MISSION_COMMAND_IM_LOAD_MISSION		= MISSION_BASE_VALUE + 169,
	MISSION_INTERFACE_CUSTOM_CHAPTER= MISSION_BASE_VALUE + 170,
	MISSION_COMMAND_CUSTOM_CHAPTER	= MISSION_BASE_VALUE + 171,
	MISSION_INTERFACE_CUSTOM_CAMPAIGN= MISSION_BASE_VALUE + 172,
	MISSION_COMMAND_CUSTOM_CAMPAIGN	= MISSION_BASE_VALUE + 173,
	MISSION_INTERFACE_TUTORIAL_LIST= MISSION_BASE_VALUE + 174,
	MISSION_COMMAND_TUTORIAL_LIST  = MISSION_BASE_VALUE + 175,
	MISSION_INTERFACE_PLAYER_GAIN_LEVEL	= MISSION_BASE_VALUE + 176,
	MISSION_COMMAND_PLAYER_GAIN_LEVEL		= MISSION_BASE_VALUE + 177,
	MISSION_INTERFACE_SAVE_REPLAY		= MISSION_BASE_VALUE + 178,
	MISSION_COMMAND_SAVE_REPLAY			= MISSION_BASE_VALUE + 179,
	MISSION_INTERFACE_REPLAY_LIST		= MISSION_BASE_VALUE + 180,
	MISSION_COMMAND_REPLAY_LIST			= MISSION_BASE_VALUE + 181,
	MISSION_INTERFACE_CUTSCENE_LIST	= MISSION_BASE_VALUE + 182,
	MISSION_COMMAND_CUTSCENE_LIST		= MISSION_BASE_VALUE + 183,
	MISSION_INTERFACE_TOTAL_ENCYCLOPEDIA	= MISSION_BASE_VALUE + 184,
	MISSION_COMMAND_TOTAL_ENCYCLOPEDIA		= MISSION_BASE_VALUE + 185,
	MISSION_INTERFACE_IM_TUTORIAL		= MISSION_BASE_VALUE + 186,
	MISSION_COMMAND_IM_TUTORIAL			= MISSION_BASE_VALUE + 187,
	
	MISSION_COMMAND_VIDEO						= MISSION_BASE_VALUE + 200,
	MISSION_INTERFACE_VIDEO					= MISSION_BASE_VALUE + 201,
	
	MISSION_COMMAND_MULTYPLAYER_CREATEGAME			= MISSION_BASE_VALUE + 202,
	MISSION_INTERFACE_MULTYPLAYER_CREATEGAME		= MISSION_BASE_VALUE + 203,
	
	MISSION_INTERFACE_PLAYERS_STATS = MISSION_BASE_VALUE + 204,
	MISSION_COMMAND_PLAYERS_STATS		= MISSION_BASE_VALUE + 205,
	GAMETT_MULTIPLAYER_TO_UI_COMMANDS = MISSION_BASE_VALUE + 206,

	MISSION_INTERFACE_MULTIPLAYER_GAMESLIST			= MISSION_BASE_VALUE + 207,
	MISSION_COMMAND_MULTIPLAYER_GAMESLIST				= MISSION_BASE_VALUE + 208,
	GAMETT_UI_SERVERINFO												= MISSION_BASE_VALUE + 209,
	MISSION_COMMAND_MULTIPLAYER_STARTINGGAME		= MISSION_BASE_VALUE + 210,
	MISSION_INTERFACE_MULTIPLAYER_STARTINGGAME	= MISSION_BASE_VALUE + 211,
//	GAMETT_NOTIFICATION_PARAM_SENDCHAT					= MISSION_BASE_VALUE + 212,
	
	MISSION_INTERFACE_MULTYPLAYER_CHAT					= MISSION_BASE_VALUE + 213,
	MISSION_COMMAND_MULTYPLAYER_CHAT						= MISSION_BASE_VALUE + 214,

	MISSION_INTERFACE_OPTIONSSETTINGS						= MISSION_BASE_VALUE + 215,
	MISSION_COMMAND_OPTIONSSETTINGS							= MISSION_BASE_VALUE + 216,
	
	MISSION_INTERFACE_PLAYER_PROFILE						= MISSION_BASE_VALUE + 217,
	MISSION_COMMAND_PLAYER_PROFILE							= MISSION_BASE_VALUE + 218,
	MISSION_COMMAND_GAMESPY_HOST								= MISSION_BASE_VALUE + 220,
	MISSION_COMMAND_GAMESPY_CLIENT							= MISSION_BASE_VALUE + 221,
	
	MISSION_INTERFACE_MP_MAP_SETTINGS						= MISSION_BASE_VALUE + 222,
	MISSION_COMMAND_MP_MAP_SETTINGS							= MISSION_BASE_VALUE + 223,
	MISSION_PLAYER_LAGGED_STATE									= MISSION_BASE_VALUE + 224,
	MISSION_PLAYER_LOADING_STATE								= MISSION_BASE_VALUE + 225,
	
	MISSION_COMMAND_WAREHOUSE										= MISSION_BASE_VALUE + 226,
	MISSION_INTERFACE_WAREHOUSE									= MISSION_BASE_VALUE + 227,

	MISSION_INTERFACE_IM_SAVE_MISSION						= MISSION_BASE_VALUE + 228,
	MISSION_COMMAND_IM_SAVE_MISSION							= MISSION_BASE_VALUE + 229,

	GAMETT_LOAD_HELPER																= MISSION_BASE_VALUE + 230,
	GAMETT_MESSAGE_ATOM_REACTION_PAUSE								= MISSION_BASE_VALUE + 231,
	GAMETT_MESSAGE_ATOM_REACTION_MESSAGE_TO_INPUT			= MISSION_BASE_VALUE + 232,
	GAMETT_MESSAGE_ATOM_REACTION_MESSAGE_TO_MAINLOOP	= MISSION_BASE_VALUE + 233,
	GAMETT_MESSAGE_REACTION														= MISSION_BASE_VALUE + 234,
	GAMETT_MESSAGELINK																= MISSION_BASE_VALUE + 235,
	GAMETT_MESSAGELINK_CONTAINER											= MISSION_BASE_VALUE + 236,
	GAMETT_MESSAGE_ATOM_REACTION_SETGLOBALVAR					= MISSION_BASE_VALUE + 237,
	GAMETT_MESSAGE_ATOM_REACTION_REMOVEGLOBALVAR			= MISSION_BASE_VALUE + 238,
	GAMETT_MESSAGE_ATOM_REACTION_CUSTOM								= MISSION_BASE_VALUE + 239,
	GAMETT_MESSAGE_ATOM_REACTION_SET_WINDOWTEXT				= MISSION_BASE_VALUE + 240,
	GAMETT_STATS_SORTER																= MISSION_BASE_VALUE + 241,
	
	MISSION_COMMAND_UNIT_PERFORMANCE									= MISSION_BASE_VALUE + 242,
	MISSION_INTERFACE_UNIT_PERFORMANCE								= MISSION_BASE_VALUE + 243,

	MISSION_INTERFACE_AFTERMISSION_POPUPS							= MISSION_BASE_VALUE + 244,
	MISSION_COMMAND_MODS_LIST													= MISSION_BASE_VALUE + 245,
	MISSION_INTERFACE_MODS_LIST												= MISSION_BASE_VALUE + 246,

	MISSION_COMMAND_SWITCH_MODE_TO										= MISSION_BASE_VALUE + 247,
	MISSION_INTERFACE_SWITCH_MODE_TO									= MISSION_BASE_VALUE + 248,
	GAMETT_MESSAGE_ATOM_REACTION_NOP									= MISSION_BASE_VALUE + 249,
	
	MISSION_COMMAND_MESSAGE_BOX												= MISSION_BASE_VALUE + 250,
	MISSION_INTERFACE_MESSAGE_BOX											= MISSION_BASE_VALUE + 251,
	
	MISSION_COMMAND_NEW_DEPOTUPGRADES									= MISSION_BASE_VALUE + 252,
	MISSION_INTERFACE_NEW_DEPOTUPGRADES								= MISSION_BASE_VALUE + 253,
	MISSION_SCORES_STATE_GAME													= MISSION_BASE_VALUE + 254,
	MISSION_SCORES_STATE_REPLAY												= MISSION_BASE_VALUE + 255,
	GAMETT_MESSAGE_ATOM_REACTION_SET_WINDOWTEXT_FROM_GLOBALVAR	= MISSION_BASE_VALUE + 256,
	
	MISSION_COMMAND_ADDRESS_BOOK											= MISSION_BASE_VALUE + 257,
	MISSION_INTERFACE_ADDRESS_BOOK										= MISSION_BASE_VALUE + 258,

	MISSION_FORCE_DWORD = 0x7fffffff
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum EMissionCommands
{
	// developer's commands
	MC_SHOW_GRID						= 0x00200001,
	MC_SHOW_OBJECTS					= 0x00200002,
	MC_SHOW_UNITS						= 0x00200003,
	MC_SHOW_TERRAIN					= 0x00200004,
	MC_SHOW_SHADOWS					= 0x00200005,
	MC_SHOW_EFFECTS					= 0x00200006,
	MC_SHOW_WARFOG					= 0x00200007,
	MC_SHOW_STATISTICS			= 0x00200008,
	MC_SHOW_BOUND_BOXES			= 0x00200009,
	MC_SHOW_DEPTH						= 0x0020000a,
	MC_SHOW_UI							= 0x0020000b,
	MC_SHOW_AVIA_BUTTONS		= 0x0020000c,
	//
	MC_SELECT_FIRST_OBJECT	= 0x00200011,
	MC_SELECT_NEXT_OBJECT		= 0x00200012,
	MC_DROP_OBJECT					= 0x00200013,
	//
	MC_ENTER_INGAME_EDITOR	= 0x00200014,
	MC_LEAVE_INGAME_EDITOR	= 0x00200015,
	// developer's commands 2
	MC_SAVE_SCENE						= 0x00200016,
	// actions
	MC_ADD_ACTION_ON				= 0x00200023,
	MC_ADD_ACTION_OFF				= 0x00200024,
	MC_FORCE_ACTION_MOVE_ON	= 0x00200025,
	MC_FORCE_ACTION_MOVE_OFF= 0x00200026,
	MC_FORCE_ACTION_ATTACK_ON	= 0x00200027,
	MC_FORCE_ACTION_ATTACK_OFF= 0x00200028,
	MC_RESET_SELECTION			= 0x00200029,

	MC_CENTER_CAMERA				= 0x00200040,

	MC_SHOW_CONSOLE					= 0x00200050,			//RR
	MC_ENTER_CHAT_MODE			= 0x00200051,
	MC_ENTER_CHAT_MODE_FRIENDS = 0x00200052,
	MC_SHOW_ESCAPE_MENU			= 0x00200060,
	MC_SHOW_SAVE_MENU				= 0x00200061,
	MC_SHOW_LOAD_MENU				= 0x00200062,
	MC_SHOW_QUIT_MENU				= 0x00200064,
	MC_CHECK_ENABLE_WINDOW	= 0x00200065,
	MC_SHOW_HELP_SCREEN			= 0x00200066,
	MC_HIDE_HELP_SCREEN			= 0x00200067,
	MC_CLEAR_SCREEN_ACKS		= 0x00200068,
	MC_SHOW_OBJECTIVES			= 0x00200069,
	MC_TOGGLE_UNIT_INFO			= 0x00200070,
	MC_HIDE_ESCAPE_WITHOUT_UNPAUSE	= 0x00200071,
	MC_SHOW_SINGLE_OBJECTIVE= 0x00200072,
	MC_CANCEL_CREDITS       = 0x00200073,
	MC_CLEAR_ACTIVE_BUTTON	= 515,
	MC_SHOW_BUILD_BUTTONS		= 520,

	MC_SET_TEXT_MODE				= 0x00200100,
	MC_CANCEL_TEXT_MODE			= 0x00200101,
	//
	MC_STATUS_OBJECT				= 0x00200200,
	//
	MC_MEDAL_CLICKED				= 0x00200300,
	//
	MC_MOVIE_SKIP_SEQUENCE	= 0x00200400,
	MC_MOVIE_SKIP_MOVIE			= 0x00200401,
	MC_MOVIE_SKIP_FRAME			= 0x00200402,
	//
	MC_UPDATE_WHO_IN_CONTAINER	= 0x00200403,
	
	MC_UPDATE_TEAM_F_R_AGS	= 0x00200404,								// WHEN team fRags changes
	MC_UPDATE_TEAM_F_L_AGS	= 0x00200405,								// when team fLags changes
	MC_UPDATE_TIME_BEFORE_CAPTURE		= 0x00200406,
	
	MC_MP_FINISHED					= 0x00200407,
	MC_MP_LAG_STARTED				= 0x00200408,
	MC_MP_LAG_FINISHED			= 0x00200409,
	MC_MP_DROP_LAGGED_PLAYER= 0x0020040a,

	
	MC_VISUALIZE_FEEDBACK_ENEMY_AVIATION				= 0x0020040b,								// nParam == feedback type
	MC_VISUALIZE_FEEDBACK_ENEMY_ANTIARTILLERY		= 0x0020040c,								// nParam == feedback type
	MC_VISUALIZE_FEEDBACK_AVIATION_READY				= 0x0020040d,								// nParam == feedback type

	MC_MP_PLAYER_LOAD_STARTED										= 0x0020040e,
	MC_MP_PLAYER_LOAD_FINISHED									= 0x0020040f,
	MC_VISUALIZE_FEEDBACK_PLACE_MARKER					= 0x00200410,
	MC_VISUALIZE_FEEDBACK_BAD_WEATHER						= 0x00200411,
	
	MC_SHOW_OPTIONS_SCREEN											= 0x00200412,

	MC_LOCAL_PLAYER_OUT_OF_SYNC									= 0x00200413,
	
	MC_MAKE_MAP_SHOT														= 0x00200414,
	
	MC_MANY_PLAYER_OUT_OF_SYNC									= 0x00200415,

	MC_VISUALIZE_FEEDBACK_AVIATION_KILLED				= 0x00200416,
	MC_VISUALIZE_FEEDBACK_AA_STARTED            = 0x00200417,
	MC_VISUALIZE_FEEDBACK_REINFORCEMENT_ARRIVAL = 0x00200418,
	MC_VISUALIZE_FEEDBACK_SCENARIOUNIT_DEAD     = 0x00200419,
	MC_VISUALIZE_FEEDBACK_SNIPER_DEAD           = 0x0020041a,
	MC_VISUALIZE_FEEDBACK_AA_NEWDETECTED        = 0x0020041b,
	MC_VISUALIZE_FEEDBACK_UNITS_PASSED          = 0x0020041c,
	MC_FORCE_DWORD					= 0x7fffffff
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SMissionStatusObject
{
	DWORD params[4];											// primary params: up to 4 different params
	DWORD armors[4];											// armors
	DWORD weaponstats[4];									// weapon stats
	int nScenarioIndex;										// scenario unit index
	DWORD dwIconsStatus;									// icons status: one bit for each icon, set for this object
	DWORD dwPlayer;												// high word - diplomacy, low word - player, this unit belong to
	wchar_t pszName[128];									// name of this object
	//
	int GetLow( int nIndex, const DWORD *vals ) const { return int( short(vals[nIndex] & 0xffff) ); }
	int GetHigh( int nIndex, const DWORD *vals ) const { return int( short((vals[nIndex] >> 16) & 0xffff) ); }
	float GetRelative( int nIndex, const DWORD *vals ) const { return Clamp( GetHigh(nIndex, vals) == 0 ? 0.0f : float( GetLow(nIndex, vals) ) / float( GetHigh(nIndex, vals) ), 0.0f, 1.0f ); }
	void GetSplit( int nIndex, const DWORD *vals, int *pnLow, int *pnHigh ) { *pnLow = GetLow( nIndex, vals ); *pnHigh = GetHigh( nIndex, vals ); }
	//
	SMissionStatusObject() { Clear(); }
	void Clear() { Zero(*this); nScenarioIndex = -1; }
};
inline DWORD PackParams( int nLow, int nHigh ) { return ( DWORD(nHigh & 0xffff) << 16 ) | DWORD( nLow & 0xffff ); }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
interface IClientAckManager : public IRefCount
{
		// type ID
	enum { tidTypeID = GAMETT_CLIENT_ACK_MANAGER };
	virtual void STDCALL AddDeathAcknowledgement( const CVec3 &vPos, const std::string &sound, const unsigned int nTimeSiceStart ) = 0;
	virtual void STDCALL AddAcknowledgement( interface IMOUnit *pUnit, const enum EUnitAckType eType, const std::string &sound, const int nSet, const unsigned int nTimeSiceStart = 0 ) = 0;
	virtual void STDCALL UnitDead( struct SMapObject *pUnit, interface IScene * pScene ) = 0;
	virtual void STDCALL Update( interface IScene * pScene ) = 0;
	virtual void STDCALL RegisterAsBored( EUnitAckType eBored, interface IMOUnit *pObject ) = 0;
	virtual void STDCALL UnRegisterAsBored( EUnitAckType eBored, interface IMOUnit *pObject ) = 0;

	virtual void STDCALL Init() = 0;
	virtual void STDCALL Clear() = 0;
	virtual bool STDCALL IsNegative( const enum EUnitAckType eAck ) = 0;
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif // __IMISSION_H__
